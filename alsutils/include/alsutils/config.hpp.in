#pragma once
#include <vector>
#include <iostream>
#include <sstream>
#include <fstream>

#ifndef COMPILING_ALSVINN
#cmakedefine ALSVINN_HAVE_CUDA 1
#cmakedefine ALSVINN_USE_MPI 1
#cmakedefine ALSVINN_USE_FLOAT
#endif

#define ALSVINN_HAS_CONFIG 1

#define ALSVINN_MAJOR_VERSION @ALSVINN_MAJOR_VERSION@
#define ALSVINN_MINOR_VERSION @ALSVINN_MINOR_VERSION@
#define ALSVINN_PATCH_VERSION @ALSVINN_PATCH_VERSION@

#cmakedefine ALSVINN_USE_TIMERS 1
#cmakedefine ALSVINN_USE_CUDA_TIMERS 1
#cmakedefine ALSVINN_PRINT_MEMORY_ALLOCATIONS 1
#cmakedefine ALSVINN_WRITE_EXTRA_VARIABLES 1

namespace alsutils {\
  std::string getAlsvinnVersion();
  
  std::string getVersionControlID();

  std::string getBuildType();

  std::string getCUDAVersion();

  std::string getCXXFlags();

  std::string getCXXFlagsDebug();

  std::string getCXXFlagsRelease();

  std::string getCXXFlagsMinSizeRel();
  std::string getCXXFlagsRelWithDebInfo();

  std::string getCUDAFlags();

  std::string getVersionControlStatus();

  std::string getCompilerID();


  std::string getCompilerVersion();
  std::string getCompilerName();


  std::string getCUDACompilerID();


  std::string getCUDACompilerVersion();
  std::string getCUDACompilerName();
  void dumpInformationToLog();

  std::string getAllCmakeVariables();

  void writeCmakeConfiguration(const std::string& outputFile);
  std::string getFloatingPointPrecisionDescription();

  std::string getFloatingPointType();

  std::string getFloatingPointMaxValue();
  std::string getFloatingPointMinValue();
  std::string getFloatingPointEpsilon();
}
